module music(input CLOCK_50, input CLOCK2_50, input [3:0] KEY, input [9:0] SW,
             input AUD_DACLRCK, input AUD_ADCLRCK, input AUD_BCLK, input AUD_ADCDAT,
             inout FPGA_I2C_SDAT, output FPGA_I2C_SCLK, output AUD_DACDAT, output AUD_XCK,
             output [6:0] HEX0, output [6:0] HEX1, output [6:0] HEX2,
             output [6:0] HEX3, output [6:0] HEX4, output [6:0] HEX5,
             output [9:0] LEDR);
			
// signals that are used to communicate with the audio core
// DO NOT alter these -- we will use them to test your design

reg read_ready, write_ready, write_s;
reg [15:0] writedata_left, writedata_right;
reg [15:0] readdata_left, readdata_right;	
wire reset, read_s;

// signals that are used to communicate with the flash core
// DO NOT alter these -- we will use them to test your design

reg flash_mem_read;
reg flash_mem_waitrequest;
reg [22:0] flash_mem_address;
reg [31:0] flash_mem_readdata;
reg flash_mem_readdatavalid;
reg [3:0] flash_mem_byteenable;
reg rst_n, clk;

// DO NOT alter the instance names or port names below -- we will use them to test your design

clock_generator my_clock_gen(CLOCK2_50, reset, AUD_XCK);
audio_and_video_config cfg(CLOCK_50, reset, FPGA_I2C_SDAT, FPGA_I2C_SCLK);
audio_codec codec(CLOCK_50,reset,read_s,write_s,writedata_left, writedata_right,AUD_ADCDAT,AUD_BCLK,AUD_ADCLRCK,AUD_DACLRCK,read_ready, write_ready,readdata_left, readdata_right,AUD_DACDAT);
flash flash_inst(.clk_clk(clk), .reset_reset_n(rst_n), .flash_mem_write(1'b0), .flash_mem_burstcount(1'b1),
                 .flash_mem_waitrequest(flash_mem_waitrequest), .flash_mem_read(flash_mem_read), .flash_mem_address(flash_mem_address),
                 .flash_mem_readdata(flash_mem_readdata), .flash_mem_readdatavalid(flash_mem_readdatavalid), .flash_mem_byteenable(flash_mem_byteenable), .flash_mem_writedata());

// your code for the rest of this task here
logic [31:0] sample;
logic signed [15:0] subsample;
logic signed [15:0] divisor;
logic hlbit;
parameter
address = 3'b000,
read_valid = 3'b001,
wait_ready = 3'b010,
send_sample = 3'b011,
wait_accept = 3'b100,
loop = 3'b101;

logic [2:0] state;

assign flash_mem_byteenable = 4'b1111;
assign clk = CLOCK_50;
assign rst_n = KEY[3];
assign reset = ~(KEY[3]);
assign read_s = 1'b0;
assign divisor = 16'd64;

always @(posedge clk or negedge rst_n) begin

 if(!rst_n) begin
  flash_mem_read = 1'b1;
  flash_mem_address = 23'b0;
  hl = 1'b0;
  state <= address;
 end else begin
  case(state)
   address:
   begin
    if(flash_mem_waitrequest == 1'b0) begin
	 state <= read_valid;
	end else begin
	 state <= address;
	end 
   end 
   
   read_valid:
   begin
	if(flash_mem_readdatavalid == 1'b1) begin
	 state <= wait_ready;
	end else begin
	 state <= read_valid;
	end
   end
   
   wait_ready:
   begin
	sample = flash_mem_readdata;
	write_s <= 1'b0;
	if(write_ready == 1'b1) begin
	 state <= send_sample;
	end else begin
	 state <= wait_ready;
	end 
   end 
   
   send_sample:
   begin
    if(hlbit == 1'b1) begin
	 subsample = sample[31:16];
	end else begin
	 subsample = sample[15:0];
	end
	
	writedata_right = subsample / divisor;
	writedata_left = subsample / divisor;
	write_s <= 1'b1;
	state <= wait_accept;
   end
   
   wait_accept:
   begin
    if(write_ready == 1'b0) begin
	 if(hlbit == 1'b1) begin
	  hlbit = 1'b0;
	  state <= loop;
	 end else begin
	  hlbit = 1'b1;
	  state <= wait_ready;
	 end 
	end else begin
	 state <= wait_accept;
    end 
   end 
   
   loop:
   begin
    flash_mem_read = 1'b1;
	if(flash_mem_address < 23'h100000) begin
	 write_s <= 1'b0;
	 flash_mem_address = flash_mem_address + 23'b1;
	end else begin
	 flash_mem_address = 23'b0;
	 hlbit = 1'b0;
	end 
	state <= address;
   end
   
   default: 
   begin
    state <= address;
   end 
   
  endcase
 end 
end 

endmodule: music
